Translation:

	M - defined as floating point array (OpenCV expects this to be of floating point type), first row [1, 0, t_x] and second row [0, 1, t_y] where t_x and t_y are the number of pixels we want to shift

	cv2.warpAffine(img, trans_matrix, (width, height)) - transforms image

Rotation:
	
	cv2.getRotationMatrix2D(rotation_point, theta, scale)

Resizing:

	cv2.resize(img, new_dimensions, interp_method) - generally cv2.INTER_AREA for interpolation method obtains the best results, other methods include INTER_LINEAR, INTER_CUBIC, INTER_NEAREST

Flipping:

	can flip around x or y axis

	cv2.flip(img, flip_code) - flip_code values: 1 (around y-axis), 0 (x-axis), negative (both axes)

Cropping:

	Array slicing - refer to ../Chapter_4/notes.txt

Arithmetic:

	cv2.add(np, np) - OpenCV performs clipping (pixels must be within [0, 255])

	np +/- np - NumPy performs modulo ("wrap around")

Bitwise Operations:

	pixels are turned "off" (value = 0) or "on" (value > 0)

	cv2.bitwise_and(img, img)

	cv2.bitwise_or(img, img)

	cv2.bitwise_xor(img, img)

	cv2.bitwise_not(img)

Masking:

	cv2.bitwise_and(img, img, mask = *mask*)

Channels:

	cv2.split(img) - returns 3 images (numpy arrays) of each channel individually

	cv2.merge([blue_img, green_img, red_img]) - merges the 3 channels together into 1 image